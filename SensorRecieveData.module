<?php namespace ProcessWire;

include "inc/dataObject.php";

/**
 * Sensor data reciever module/page
 *
 * This module creates an URL hook to recieve data from different sensors. 
 * The Hook creates a page routing that pipes all incomming traffic to that URL to this module.   
 */

class SensorRecieveData extends WireData implements Module {

	/**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 *
	 */
	public static function getModuleInfo() {

		return array(

			'title' => 'Sensor data reciever module/page', 
			'version' => "0.1.2", 
			'summary' => 'URL Hook whith funktionality to recieve sensor data.',
			'singular' => true, 
			'autoload' => true
			);
	}

    /**  
     *  This little hook does all the webpage routing to the recieve method.
     *  
     *  Init comes before ready so this comes before RedirOnMain  
    */
    public function Init() {
		$this->pages->addHook('/reciever/', $this, 'recieveData'); 	
    }

    /**
     * Recieve method get called when Hook is triggered
     */
    public function recieveData($event) {
        
        // Fetch JSON Data
        $jsonString = $this->input->post('jsonData'); 

        // Nothing to process so end it here
        if (empty($jsonString)) {
            return "!! jsonData not found or empty !!";
        }
		
        $myData = dataObject::Deserialize($jsonString);

        // Data was completely invalid return the error if debug is on 
        if (is_string($myData)) {
            // only return information if debug is on 
            if ($this->config->debug){
                return print_r($myData,true);
            }
            else {
                return "!! Failed !!";
            }
        }
        //return "\nSUCCESS\n\n". print_r($myData,true);

        // From here we create and validate for the Data Page 

        //$myTemplate= $this->templates->get("Dataset");

        // @todo I would prefer to add additional field based validation here 
        // So please keep this lines in.  
        /*$out ="Felder: ";
        foreach ($myTemplate->fields as $f) {
            $out.= $f->name . " ";
        }
        return $out;*/
        
        //Try to find the matching sensor 
        $sensor=$this->pages->get("template=Sensor, naming={$myData->title}");

        if(empty($sensor)) 
            return "!! Sensor not found !!";
            
        // fetch IP for comparison later
        // Testsensors have invalid Ip
        $Ip=$this->session->getIP();

        // Check the hash    
        if ($sensor->password_hash != $myData->hash) 
            return "!! Sensor failed to authenticate Sensor: $sensor->password_hash     Data: $myData->hash!!\n";

        if (!$sensor->active) 
            return "!! Sensor Inactive !!";
        
        //    return "\nSUCCESS\n\n". print_r($myData,true);
        //return "\nSUCCESS \n\n";
        
        // Creaate a new page
        $p = new Page();
        $p->template = "Dataset";
        $p->parent = 1106; //Datesets Parent
        $p->title = "Dataset ". $sensor->naming." ". $sensor->sensor_room->title." ". date('Y-m-d');
        $p->save();

        // Save page data
        $p->date_time=time();
        $p->dataset_sensor=$sensor;
        $p->dataset_room=$sensor->sensor_room;
        $p->co2_ppm=$myData->co2Ppm;
        $p->co2_value=$myData->co2Value;
        $p->temperature=$myData->temperature;
        $p->temp_value=$myData->tempValue;
        $p->save();

        //Save some values to sensor
        //turn of output formating to save stuff directly $sensor->of(false);
        $sensor->edit("co2_current_level", $myData->co2Ppm);
        $sensor->edit("temp_current_level", $myData->temperature);
        $sensor->save();

        
        return "\nSUCCESS Saved\n\n";

	}

    
	
}

