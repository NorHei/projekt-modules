<?php namespace ProcessWire;

/**
 * Transform sensor data into a Data Object and do some basic validation and sanitation
 * 
 * Still the application needs to do some additional checks, but a lot of crap is filtered out.  
 * In addition this class is used for testing the test Sensor class in recieve.php
 */
class recieveDataObject extends WireData implements Module{

    // As this is a simple Data carrier, allmost  all properties stay public for easy iteration. 
      
    /** @var string $title */
    public $title;
    
    /** @var string $hash */
    public $hash;
    
    /** @var float|int $tempValue */
    public $tempValue;
    
    /** @var float|int $temperature */
    public $temperature;
    
    /** @var int $co2Ppm */
    public $co2Ppm;
    
    /** @var float|int $co2Value */
    public $co2Value;
    
    /** @var string $ipAddress*/
    public $ipAddress;

    /** @var string $error*/
    protected $error="" ;

    // Getters
    
    **
     * @return bool/string
     */
    public function getError() {
        return $this->error;
}

    /**
	 * getModuleInfo is a module required by all modules to tell ProcessWire about them
	 *
	 * @return array
	 */
	public static function getModuleInfo() {

		return array(

			'title' => 'Data Object for recieving Sensor Data ', 
			'version' => "0.1.3", 
			'summary' => 'Fetches the Data Object from .',
			'singular' => false, 
			'autoload' => false 
			);
	}

    /**
     *  Constructor fetches Post and fills all Properties 
     */
    public function __construct(){

        $jsonString = $input->post('jsonData'); 

        // Nothing found so end it
        if (empty($jsonString)) {
            $this->error="!! jsonData not found or empty !! \n";
            return;
        }

        // needed for check if all properties are filled
        $cProperties = count((array)$classInstance);

        // counter for filled properties
        $cFilled = 0;

        $classInstance = new DataObject();

        $jsonArray = json_decode($jsonString);
        
        // fill properties whith data
        foreach ($jsonArray as $key => $value) {
            if (!property_exists($classInstance, $key)) continue;
            $classInstance->{$key} = $value;
            $cFilled++;
        }
        
        // Inconsistent properties 
        if ($cFilled == $cProperties ){
            $error .= "Invalid properties filled: $cFilled  / Properties: $cProperties\n";
        }

        // Validation
        $valiOut = $classInstance->basicValidation();
        if(is_string($valiOut)) {
            $error .= "Basic Validation failed!\n" ;
            $error .= $valiOut;
        }

        // If all ok return the object
        if (empty($error)){
            $classInstance->basicSanitation();
        }




    }
    /**
     * Deserialize static method 
     * 
     * This is more or less a self factory that creates an instance of the dataclass and fills 
     * it whith the attribures aqired from JSON string. If there are inconsintencies whith 
     * those attributes it will fail and return an empty object.
     * 
     *  
     * 
     *  @return object/string 
     */
    public static function Deserialize($jsonString)
    {   
        // error String
        $this->error="";
        
        // needed for check if all properties are filled
        $cProperties = count((array)$classInstance);

        // counter for filled properties
        $cFilled = 0;

        $classInstance = new DataObject();

        $jsonArray = json_decode($jsonString);
        
        // fill properties whith data
        foreach ($jsonArray as $key => $value) {
            if (!property_exists($classInstance, $key)) continue;
            $classInstance->{$key} = $value;
            $cFilled++;
        }
        
        // Inconsistent properties 
        if ($cFilled == $cProperties ){
            $error .= "Invalid properties filled: $cFilled  / Properties: $cProperties\n";
        }

        // Validation
        $valiOut = $classInstance->basicValidation();
        if(is_string($valiOut)) {
            $error .= "Basic Validation failed!\n" ;
            $error .= $valiOut;
        }

        // If all ok return the object
        if (empty($error)){
            $classInstance->basicSanitation();
            return $classInstance;
        }

        // concerning PHP manual its better to use both for garbage collection is faster that way. 
        $classInstance = NULL;
        unset($classInstance);

        // Return the error
        return $error;   
    } 
    

    /**
     * Basic Validation method
     * 
     * Returns True if validation is OK , error string otherwise
     * 
     * @return bool/string 
     */
    protected function basicValidation() {

        $error="";
        
        if (!preg_match("/^(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])(.(25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])){3}$/", $this->ipAddress)) {
            $error .="IPAdress Validation Failed{$this->ipAddress}\n";
        }
            
        if (!is_string($this->title) OR strlen($this->title) > 250 ){
            $error .="Title Validation Failed: {$this->title}\n";
        }
    
        if (!is_string($this->hash) OR strlen($this->hash) > 250 ){
            $error .="Hash Validation Failed: {$this->hash}\n";
        }

        if (!is_numeric($this->tempValue)){
            $error .="TempValue Validation Failed: {$this->tempValue}\n";
        }
 
        if (!is_numeric($this->temperature)){
            $error .="Temperature Validation Failed: {$this->temperature}\n";
        }
     
        if (!is_numeric($this->co2Ppm)){
            $error .="Co2Ppm Validation Failed: {$this->co2Ppm}\n";
        }
 
        if (!is_numeric($this->co2Value)){
            $error .= "co2Value Validation Failed: {$this->co2Value} \n";
        }
        
        if (empty($error)){
            return true;
        }
        else {
            return $error;
        }

    }

    /**
     * Just some really basic sanitation.
     * 
     * @return void
     */
    protected function basicSanitation() {
        
        $this->tempValue = (float)$this->tempValue;
        $this->temperature= (float)$this->temperature;
        $this->co2Ppm= (int)$this->co2Ppm;
        $this->co2Value= (float)$this->co2Value;

    }
}
